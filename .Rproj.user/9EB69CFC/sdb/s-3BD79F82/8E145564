{
    "contents" : "priorSim <- function(.prior,tree,plot=TRUE,nsim=1,exclude.branches=NULL, ...){\n  tree <- reorder(tree,'postorder')\n  model <- attributes(.prior)$model\n  dists <- attributes(.prior)$dist\n  prior.params <- attributes(.prior)$param\n  rdists <- lapply(dists,function(x) gsub('^[a-zA-Z]',\"r\",x))\n  prior.params <- lapply(prior.params,function(x) x[-which(names(x)==\"log\")])\n  rdists.fx <- lapply(rdists,get)\n  rdists.fx <- lapply(1:length(rdists.fx),function(x) .set.defaults(rdists.fx[[x]],defaults=prior.params[[x]]))\n  names(rdists.fx) <- gsub('^[a-zA-Z]',\"r\",names(rdists))\n  N <- sapply(names(rdists.fx),function(x) switch(x, ralpha=nsim, rsig2=nsim, rsig2jump=nsim, rhalflife=nsim, rVy=nsim, rh2=nsim, rP=nsim, rw2=nsim, rNe=nsim, rk=nsim, rtheta=NULL, rloc=NULL, rsb=NULL))\n  varN <- which(sapply(N,is.null))\n  N <- N[-varN]\n  simpar <- lapply(1:nsim,function(i){ y <- lapply(names(N), function(x) rdists.fx[[x]](1)); names(y) <- gsub('^[a-zA-Z]',\"\",names(N)); y})\n  #if(model %in% c(\"OUcpp\",\"QGcpp\",\"OUreparcpp\")){\n  #  T <- sum(tree$edge.length[!(1:length(tree$edge.length) %in% exclude.branches)])\n  #  pp <- tree$edge.length/T\n  #  pp[1:length(pp) %in% exclude.branches] <- 0\n  #  k <- lapply(simpar,function(x) x$k)\n  #  sb <- lapply(k,function(x) .sample(1:length(tree$edge.length),x,replace=TRUE,prob=pp))\n  #  loc <- lapply(sb,function(x) runif(length(x),min=0,max=tree$edge.length[x]))\n  #  t2 <- lapply(k,function(x) 2:(x+1))\n  #  simpar <- lapply(1:nsim,function(x) c(simpar[[x]],list(sb=sb[[x]],loc=loc[[x]],t2=t2[[x]])))\n  #  theta <- lapply(1:nsim,function(x) pars2simmap(simpar[[x]],tree,sim.theta=TRUE,root.theta=rdists.fx$rtheta(1))$pars$theta)\n  #  simpar <- lapply(1:nsim, function(x) c(simpar[[x]],list(theta=theta[[x]],ntheta=length(theta[[x]]))))\n  #}\n  #if(model %in% c(\"OU\",\"QG\",\"OUrepar\")){\n  k <- sapply(simpar,function(x) x$k)\n  sb <- lapply(k,function(x) rdists.fx$rsb(x))\n  loc <- lapply(1:length(k),function(x) rdists.fx$rloc(k[x])*tree$edge.length[sb[[x]]])\n  t2 <- lapply(k,function(x) 2:(x+1))\n  theta <- lapply(k,function(x) rdists.fx$rtheta(x+1))\n  simpar <- lapply(1:nsim,function(x) c(simpar[[x]],list(ntheta=k[x]+1, theta=theta[[x]],sb=sb[[x]],loc=loc[[x]],t2=t2[[x]])))\n  #}\n  if(plot){\n    if(nsim>1){\n      par(ask=TRUE)\n    }\n    for(i in 1:nsim){\n      maps <- pars2simmap(simpar[[i]],tree,sim.theta=FALSE,theta=simpar[[i]]$theta)\n      col <- maps$col\n      plotSimmap(maps$tree,colors=col, ...)\n    }\n    \n  }\n  return(list(pars=simpar,tree=tree))\n}\n\ndataSim <- function(pars, model, tree, map.type=\"pars\", emap=NULL, SE=0, phenogram=TRUE, ...){\n  if(model %in% c(\"QG\")){\n    pars$alpha <- QG.alpha(pars)\n    pars$sig2 <- QG.sig2(pars)\n  }\n  if(model %in% c(\"OUrepar\")){\n    p <- OU.repar(pars)\n    pars$alpha <- p$alpha\n    pars$sig2 <- p$sig2\n  }\n  if(map.type==\"simmap\"){\n    print(\"Using mapped regimes from ape tree file\")\n    maps <- tree$maps\n  }\n  if(map.type==\"pars\"){\n    print(\"Using mapped regimes from parameter list\")\n    maps <- pars2simmap(pars, tree, sim.theta=FALSE, theta=pars$theta, root.theta=pars$theta[1])$tree$maps\n  }\n  if(map.type==\"emap\"){\n    print(\"Using mapped regimes from edge map\")\n    maps <- emap2simmap(emap,tree)$maps\n  }\n  dummy <- rep(0, length(tree$tip.label))\n  names(dummy) <- tree$tip.label\n  tree$maps <- maps\n  cache <- .prepare.ou.univariate(tree,dummy)\n  cache$maps <- maps\n  W <- .simmap.W(cache,pars)\n  if(pars$k > 0){\n    E.th <- W%*%pars$theta\n  } else {E.th <- W*pars$theta}\n  Sigma <- ouMatrix(vcv.phylo(tree),pars$alpha)*pars$sig2\n  diag(Sigma) <- diag(Sigma)+SE\n  X <- mvrnorm(1,E.th,Sigma)\n  if(phenogram){\n    col <- c(1,rainbow(pars$k))\n    names(col) <- 1:pars$ntheta\n    phenogram(tree,X,colors=col, ...)\n  }\n  return(list(W=W, E.th=E.th,dat=X))\n}\n\n",
    "created" : 1379438422358.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3553976767",
    "id" : "8E145564",
    "lastKnownWriteTime" : 1379995543,
    "path" : "~/repos/bayou/bayou_1.0/R/bayou-simulation.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}